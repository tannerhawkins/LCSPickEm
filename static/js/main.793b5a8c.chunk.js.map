{"version":3,"sources":["data/constants.js","data/firebase.js","app/account/reducers.js","app/store.js","app/account/selectors.js","components/Template/Button.js","components/Template/ScrollToTop.js","layouts/Main.js","app/account/actions.js","images/pepehands.png","pages/Error.js","App.js","serviceWorker.js","index.js"],"names":["Constants","IN_CYPRESS_TEST","undefined","window","Cypress","COLOR","PURPLE","LIGHT_GREEN","DARK_GREEN","GREEN","WHITE","LIGHT_BLUE","DARK_BLUE","TEAL","GRAY","PINK","LIGHT_PINK","BLACK","HEADER_HEIGHT","SIDEBAR_WIDTH","EMPTY_MODULE","title","description","public","creator","steps","MOCK_MODULE","type","data","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","GoogleAuthProvider","userDataDb","collection","gameDataDb","initialState","signedIn","weeks","allReducers","combineReducers","account","state","action","payload","user","picks","passwordLength","week","clearState","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","selectAccountState","createSelector","getState","selectWeek","selectWeeks","selectPicks","selectIsSignedIn","selectUser","displayName","email","selectAccountType","accountType","selectUID","uid","StyledButton","styled","div","ScrollToTop","pathname","useLocation","useEffect","scrollTo","Main","props","titleTemplate","defaultTitle","defer","name","content","id","children","defaultProps","fullPage","signIn","setWeeks","setPasswordLength","length","setPicks","setWeek","Wrapper","Return","ErrorMessage","p","ErrorImage","img","withRouter","error","resetErrorBoundary","history","useHistory","role","src","PepeHands","onClick","push","location","reload","PUBLIC_URL","process","SignIn","lazy","SignUp","Index","Standings","Home","App","dispatch","useDispatch","loginState","useSelector","doc","get","then","basename","fallback","FallbackComponent","ErrorFallback","onReset","exact","path","component","to","Boolean","hostname","match","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.793b5a8c.chunk.js","sourcesContent":["export const Constants = {\r\n  IN_CYPRESS_TEST: window.Cypress !== undefined,\r\n  COLOR: {\r\n    PURPLE: \"#6066FA\",\r\n    LIGHT_GREEN: \"#A2E1D0\",\r\n    DARK_GREEN: \"#6BAE9B\",\r\n    GREEN: \"#7DCBB5\",\r\n    WHITE: \"#FFFFFF\",\r\n    LIGHT_BLUE: \"#92d4f4\",\r\n    DARK_BLUE: \"#373B53\",\r\n    TEAL: \"#B5FFEA\",\r\n    GRAY: \"#E5E5E5\",\r\n    PINK: \"#eb34c0\",\r\n    LIGHT_PINK: \"#e663c6\",\r\n    BLACK: \"#000000\",\r\n  },\r\n  HEADER_HEIGHT: \"80px\",\r\n  SIDEBAR_WIDTH: \"80px\",\r\n  EMPTY_MODULE: {\r\n    title: \"\",\r\n    description: \"\",\r\n    public: true,\r\n    creator: undefined,\r\n    steps: [],\r\n  },\r\n  MOCK_MODULE: {\r\n    title: \"Mock Module\",\r\n    description: \"This module is used for testing and development\",\r\n    public: true,\r\n    creator: \"someteacherIDhere\",\r\n    steps: [\r\n      {\r\n        type: \"text\",\r\n        data: {\r\n          // Some kind of text data here (title, description, etc.)\r\n        },\r\n      },\r\n      {\r\n        type: \"video\",\r\n        data: {\r\n          // Some kind of reference to a video stored somewhere in Firebase and maybe a video title\r\n        },\r\n      },\r\n      {\r\n        type: \"quiz\",\r\n        data: {\r\n          // Some kind of quiz data here (array of questions, title, etc.)\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n","// Import the functions you need from the SDKs you need\r\nimport firebase from \"firebase\";\r\nimport { Constants } from \"./constants\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCjHLGz8O2l74nClTF96qs2nQVVFNQStIo\",\r\n  authDomain: \"lcspickem-26ae4.firebaseapp.com\",\r\n  projectId: \"lcspickem-26ae4\",\r\n  storageBucket: \"lcspickem-26ae4.appspot.com\",\r\n  messagingSenderId: \"980876753088\",\r\n  appId: \"1:980876753088:web:787a12fa35989aeaca5525\",\r\n  measurementId: \"G-71Q0N4KSYM\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = firebase.initializeApp(firebaseConfig);\r\nconst db = firebase.firestore();\r\n\r\nvar auth = firebase.auth();\r\nvar provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport const userDataDb = db.collection(\"userData\");\r\nexport const gameDataDb = db.collection(\"gameData\");\r\n\r\nexport { auth, provider, app };\r\n","const initialState = {\r\n  signedIn: false,\r\n  weeks: [],\r\n};\r\n\r\n// Use the initialState as a default value\r\nexport default function accountReducer(state = initialState, action) {\r\n  // The reducer normally looks at the action type field to decide what happens\r\n  switch (action.type) {\r\n    // Do something here based on the different types of actions\r\n    case \"SIGN_IN\":\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n        signedIn: true,\r\n        user: action.payload,\r\n      };\r\n\r\n    case \"SIGN_OUT\":\r\n      return {\r\n        initialState,\r\n      };\r\n\r\n    case \"SET_PICKS\":\r\n      return {\r\n        ...state,\r\n        picks: action.payload,\r\n      };\r\n\r\n    case \"SET_PASSWORD_LENGTH\":\r\n      return {\r\n        ...state,\r\n        passwordLength: action.payload,\r\n      };\r\n\r\n    case \"CLEAR_STATE\":\r\n      return {\r\n        initialState,\r\n      };\r\n\r\n    case \"SET_WEEK\":\r\n      return {\r\n        ...state,\r\n        week: action.payload,\r\n      };\r\n\r\n    case \"SET_WEEKS\":\r\n      return {\r\n        ...state,\r\n        weeks: action.payload,\r\n      };\r\n\r\n    default:\r\n      // If this reducer doesn't recognize the action type, or doesn't\r\n      // care about this specific action, return the existing state unchanged\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers, createStore } from \"@reduxjs/toolkit\";\r\nimport accountReducer from \"./account/reducers.js\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport persistReducer from \"redux-persist/es/persistReducer\";\r\nimport persistStore from \"redux-persist/es/persistStore\";\r\n\r\nconst allReducers = combineReducers({\r\n  account: accountReducer,\r\n});\r\n\r\nconst rootReducer = (state, action) => {\r\n  if (action.type === \"CLEAR_STATE\") {\r\n    state = undefined;\r\n  }\r\n\r\n  return allReducers(state, action);\r\n};\r\n\r\nexport const clearState = () => {\r\n  return {\r\n    type: \"CLEAR_STATE\",\r\n  };\r\n};\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(\r\n  persistedReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\nexport const persistor = persistStore(store);\r\n","import { createSelector } from \"reselect\";\r\nimport { store } from \"../store.js\";\r\n\r\nconst selectState = () => store.getState();\r\n\r\nconst selectAccountState = createSelector(\r\n  selectState,\r\n  (state) => state.account\r\n);\r\n\r\nexport const selectWeek = createSelector(\r\n  selectAccountState,\r\n  (state) => state.week\r\n);\r\n\r\nexport const selectWeeks = createSelector(\r\n  selectAccountState,\r\n  (state) => state.weeks\r\n);\r\n\r\nexport const selectPicks = createSelector(\r\n  selectAccountState,\r\n  (state) => state.picks\r\n);\r\n\r\nexport const selectIsSignedIn = createSelector(\r\n  selectAccountState,\r\n  (state) => state.signedIn\r\n);\r\n\r\nexport const selectDisplayName = createSelector(\r\n  selectAccountState,\r\n  (state) => state.displayName\r\n);\r\n\r\nexport const selectEmail = createSelector(\r\n  selectAccountState,\r\n  (state) => state.email\r\n);\r\n\r\nexport const selectUser = createSelector(selectAccountState, (state) => state);\r\n\r\nexport const selectAccountType = createSelector(\r\n  selectAccountState,\r\n  (state) => state.accountType\r\n);\r\n\r\nexport const selectUID = createSelector(\r\n  selectAccountState,\r\n  (state) => state.uid\r\n);\r\n","import { Constants } from \"../../data/constants\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledButton = styled.div`\r\n  background-color: ${Constants.COLOR.WHITE};\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n  color: black;\r\n  font-weight: bold;\r\n  &:hover {\r\n    background-color: ${Constants.COLOR.GRAY};\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport default StyledButton;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n// See https://reacttraining.com/react-router/web/guides/scroll-restoration/scroll-to-top\r\nconst ScrollToTop = () => {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\r\nimport ScrollToTop from \"../components/Template/ScrollToTop\";\r\n\r\nconst Main = (props) => (\r\n  <HelmetProvider>\r\n    <ScrollToTop />\r\n    <Helmet\r\n      titleTemplate=\"%s | LCS Pick'Em\"\r\n      defaultTitle=\"LCS Pick'Em\"\r\n      defer={false}\r\n    >\r\n      {props.title && <title>{props.title}</title>}\r\n      <meta name=\"description\" content={props.description} />\r\n    </Helmet>\r\n    <div id=\"wrapper\">\r\n      <div id=\"main\">{props.children}</div>\r\n    </div>\r\n  </HelmetProvider>\r\n);\r\n\r\nMain.propTypes = {\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]),\r\n  fullPage: PropTypes.bool,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n};\r\n\r\nMain.defaultProps = {\r\n  children: null,\r\n  fullPage: false,\r\n  title: null,\r\n  description: \"LCS Pick'Em\",\r\n};\r\n\r\nexport default Main;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { auth, userDataDb } from \"../../data/firebase\";\r\n\r\nexport const signIn = (user) => {\r\n  return {\r\n    type: \"SIGN_IN\",\r\n    payload: user,\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: \"SIGN_OUT\",\r\n  };\r\n};\r\n\r\nexport const setWeeks = (weeks) => {\r\n  return {\r\n    type: \"SET_WEEKS\",\r\n    payload: weeks,\r\n  };\r\n};\r\n\r\nexport const setPasswordLength = (length) => {\r\n  return {\r\n    type: \"SET_PASSWORD_LENGTH\",\r\n    payload: length,\r\n  };\r\n};\r\n\r\nexport const setPicks = (picks) => {\r\n  return {\r\n    type: \"SET_PICKS\",\r\n    payload: picks,\r\n  };\r\n};\r\n\r\nexport const setWeek = (week) => {\r\n  return {\r\n    type: \"SET_WEEK\",\r\n    payload: week,\r\n  };\r\n};\r\n\r\nexport const refreshAccountData = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  userDataDb\r\n    .doc(auth.currentUser.uid)\r\n    .get()\r\n    .then((doc) => dispatch(signIn(doc.data())));\r\n};\r\n","export default __webpack_public_path__ + \"static/media/pepehands.273a0939.png\";","import { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport PepeHands from \"../images/pepehands.png\";\r\nimport StyledButton from \"../components/Template/Button\";\r\nimport { Constants } from \"../data/constants\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nfunction ErrorFallback({ error, resetErrorBoundary }) {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Wrapper role=\"alert\">\r\n      <ErrorMessage>\r\n        Something went wrong, tell Hawkins to fix his trash site\r\n      </ErrorMessage>\r\n      <ErrorImage src={PepeHands} />\r\n      <Return\r\n        onClick={() => {\r\n          history.push(`/index`);\r\n          window.location.reload();\r\n        }}\r\n      >\r\n        Home\r\n      </Return>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  padding: 50px;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Return = styled(StyledButton)`\r\n  font-size: 30px;\r\n  line-height: 30px;\r\n  font-weight: 700;\r\n  max-width: 200px;\r\n  height: 60px;\r\n  padding: 10px 35px;\r\n  margin-top: 50px;\r\n  background-color: ${Constants.COLOR.PURPLE};\r\n  :hover {\r\n    background-color: ${Constants.COLOR.WHITE};\r\n  }\r\n`;\r\n\r\nconst ErrorMessage = styled.p`\r\n  text-align: center;\r\n`;\r\n\r\nconst ErrorImage = styled.img`\r\n  width: 200px;\r\n`;\r\n\r\nexport default withRouter(ErrorFallback);\r\n","import React, { Suspense, lazy, useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  useHistory,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\nimport Main from \"./layouts/Main\"; // fallback for lazy pages\r\nimport { selectIsSignedIn, selectUID } from \"./app/account/selectors\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { auth, userDataDb } from \"./data/firebase\";\r\nimport { signIn } from \"./app/account/actions\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport ErrorFallback from \"./pages/Error\";\r\n\r\nconst { PUBLIC_URL } = process.env;\r\n\r\n// Every route - we lazy load so that each page can be chunked\r\n// NOTE that some of these chunks are very small. We should optimize\r\n// which pages are lazy loaded in the future.\r\nconst SignIn = lazy(() => import(\"./pages/LogIn/SignIn\"));\r\nconst SignUp = lazy(() => import(\"./pages/LogIn/SignUp\"));\r\nconst Index = lazy(() => import(\"./pages/Index\"));\r\nconst Standings = lazy(() => import(\"./pages/Standings\"));\r\nconst Home = lazy(() => import(\"./pages/Home\"));\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const loginState = useSelector(selectIsSignedIn);\r\n  const uid = useSelector(selectUID);\r\n\r\n  useEffect(() => {\r\n    if (loginState) {\r\n      userDataDb\r\n        .doc(uid)\r\n        .get()\r\n        .then((data) => dispatch(signIn(data.data())));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <BrowserRouter basename={PUBLIC_URL}>\r\n      <Suspense fallback={<Main />}>\r\n        <ErrorBoundary FallbackComponent={ErrorFallback} onReset={() => {}}>\r\n          <Switch>\r\n            <Route exact path=\"/index\" component={Index} />\r\n            {!loginState && <Route path=\"/signin\" component={SignIn} />}\r\n            {!loginState && <Route path=\"/signup\" component={SignUp} />}\r\n            {loginState && <Route path=\"/home\" component={Home} />}\r\n            {loginState && <Route path=\"/standings\" component={Standings} />}\r\n            {loginState && <Redirect to=\"/home\" />}\r\n            <Redirect to=\"/index\" />\r\n          </Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/index\" />\r\n          </Route>\r\n        </ErrorBoundary>\r\n      </Suspense>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { persistor, store } from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}